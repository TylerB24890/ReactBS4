/**
* Collections of SCSS Mixins
*/

/*
* font-smothing
* @include font-smoothing(on);
* @include font-smoothing(off);
*/
@mixin font-smoothing($value:on){
	@if $value == on{
		-webkit-font-smoothing:antialiased;
		-moz-osx-font-smoothing:grayscale;
	}
	@else{
		-webkit-font-smoothing:subpixel-antialiased;
		-moz-osx-font-smoothing:auto;
	}
}

/*
* Animate css properties
* usage
* scss - @include animate(color);
*     or @include animate(color width);
*     or @include animate(color width, 1s, linear);
*/
$animation-speed: .25s !default;

@mixin animate($properties, $duration: $animation-speed, $easing: ease-in-out) {
	$list:();
	@each $prop in $properties {
		$str: #{$prop} #{$duration} #{$easing};
		$list: join($list, #{$str}, comma);
	}
	transition: $list;
}

/*
* Mixin for styling form-placeholders
* @example scss - Usage
*   @include placeholder {
*    color: #333;
*   }
*
*   input[type='text'],
*   input[type='tel'],
*   input[type='email'] {
*     @include placeholder {
*      color: red;
*     }
*   }
*/
@mixin placeholder {
	&::-webkit-input-placeholder {@content}
	&::-moz-placeholder {opacity: 1; @content}
	&:-moz-placeholder {@content}
	&:-ms-input-placeholder {@content}
	&.placeholder {@content};
}


/// Breakpoints.
/// @var {list}
$breakpoints: () !global;

/// Vendor prefixes.
/// @var {list}
$vendor-prefixes: (
'-moz-',
'-webkit-',
'-ms-',
''
);

/// Properties that should be vendorized.
/// @var {list}
$vendor-properties: (
	'align-content',
	'align-items',
	'align-self',
	'animation',
	'animation-delay',
	'animation-direction',
	'animation-duration',
	'animation-fill-mode',
	'animation-iteration-count',
	'animation-name',
	'animation-play-state',
	'animation-timing-function',
	'appearance',
	'backface-visibility',
	'box-sizing',
	'filter',
	'flex',
	'flex-basis',
	'flex-direction',
	'flex-flow',
	'flex-grow',
	'flex-shrink',
	'flex-wrap',
	'justify-content',
	'order',
	'perspective',
	'pointer-events',
	'transform',
	'transform-origin',
	'transform-style',
	'transition',
	'transition-delay',
	'transition-duration',
	'transition-property',
	'transition-timing-function'
);

/// Values that should be vendorized.
/// @var {list}
$vendor-values: (
	'filter',
	'flex',
	'linear-gradient',
	'radial-gradient',
	'transform'
);

// Functions.

/// Replaces a substring within another string.
/// @author Hugo Giraudel
/// @param {string} $string String.
/// @param {string} $search Substring.
/// @param {string} $replace Replacement.
/// @return {string} Updated string.
@function str-replace($string, $search, $replace: '') {

	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;

}

/// Replaces a substring within each string in a list.
/// @param {list} $strings List of strings.
/// @param {string} $search Substring.
/// @param {string} $replace Replacement.
/// @return {list} Updated list of strings.
@function str-replace-all($strings, $search, $replace: '') {

	@each $string in $strings {
		$strings: set-nth($strings, index($strings, $string), str-replace($string, $search, $replace));
	}

	@return $strings;

}

/// Gets a value from a map.
/// @author Hugo Giraudel
/// @param {map} $map Map.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function val($map, $keys...) {

	@if nth($keys, 1) == null {
		$keys: remove-nth($keys, 1);
	}

	@each $key in $keys {
		$map: map-get($map, $key);
	}

	@return $map;

}

// Mixins.

/// Wraps @content in a @media block using a given breakpoint.
/// @param {string} $breakpoint Breakpoint.
/// @param {map} $queries Additional queries.
@mixin breakpoint($breakpoint: null, $queries: null) {

	$query: 'screen';

	// Breakpoint.
	@if $breakpoint and map-has-key($breakpoints, $breakpoint) {
		$query: $query + ' and ' + map-get($breakpoints, $breakpoint);
	}

	// Queries.
	@if $queries {
		@each $k, $v in $queries {
			$query: $query + ' and (' + $k + ':' + $v + ')';
		}
	}

	@media #{$query} {
		@content;
	}

}

/// Wraps @content in a @media block targeting a specific orientation.
/// @param {string} $orientation Orientation.
@mixin orientation($orientation) {
	@media screen and (orientation: #{$orientation}) {
		@content;
	}
}


/// Wraps @content in vendorized keyframe blocks.
/// @param {string} $name Name.
@mixin keyframes($name) {

	@-moz-keyframes #{$name} { @content; }
	@-webkit-keyframes #{$name} { @content; }
	@-ms-keyframes #{$name} { @content; }
	@keyframes #{$name} { @content; }

}


/// Vendorizes a declaration's property and/or value(s).
/// @param {string} $property Property.
/// @param {mixed} $value String/list of value(s).
@mixin vendor($property, $value) {

	// Determine if property should expand.
	$expandProperty: index($vendor-properties, $property);

	// Determine if value should expand (and if so, add '-prefix-' placeholder).
	$expandValue: false;

	@each $x in $value {
		@each $y in $vendor-values {
			@if $y == str-slice($x, 1, str-length($y)) {

				$value: set-nth($value, index($value, $x), '-prefix-' + $x);
				$expandValue: true;

			}
		}
	}

	// Expand property?
	@if $expandProperty {
		@each $vendor in $vendor-prefixes {
			#{$vendor}#{$property}: #{str-replace-all($value, '-prefix-', $vendor)};
		}
	}

	// Expand just the value?
	@elseif $expandValue {
		@each $vendor in $vendor-prefixes {
			#{$property}: #{str-replace-all($value, '-prefix-', $vendor)};
		}
	}

	// Neither? Treat them as a normal declaration.
	@else {
		#{$property}: #{$value};
	}

}
